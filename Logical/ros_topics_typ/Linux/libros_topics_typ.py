# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libros_topics_typ
else:
    import _libros_topics_typ

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class ros_topics_typEventHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def on_connected(self):
        return _libros_topics_typ.ros_topics_typEventHandler_on_connected(self)

    def on_disconnected(self):
        return _libros_topics_typ.ros_topics_typEventHandler_on_disconnected(self)

    def on_operational(self):
        return _libros_topics_typ.ros_topics_typEventHandler_on_operational(self)

    def on_change_odemetry(self):
        return _libros_topics_typ.ros_topics_typEventHandler_on_change_odemetry(self)
    __swig_destroy__ = _libros_topics_typ.delete_ros_topics_typEventHandler
    ros_topics_typ_datamodel = property(_libros_topics_typ.ros_topics_typEventHandler_ros_topics_typ_datamodel_get, _libros_topics_typ.ros_topics_typEventHandler_ros_topics_typ_datamodel_set)

    def __init__(self):
        if self.__class__ == ros_topics_typEventHandler:
            _self = None
        else:
            _self = self
        _libros_topics_typ.ros_topics_typEventHandler_swiginit(self, _libros_topics_typ.new_ros_topics_typEventHandler(_self, ))
    def __disown__(self):
        self.this.disown()
        _libros_topics_typ.disown_ros_topics_typEventHandler(self)
        return weakref.proxy(self)

# Register ros_topics_typEventHandler in _libros_topics_typ:
_libros_topics_typ.ros_topics_typEventHandler_swigregister(ros_topics_typEventHandler)


def add_event_handler(ros_topics_typ_datamodel, handler):
    return _libros_topics_typ.add_event_handler(ros_topics_typ_datamodel, handler)
class ros_config_typ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    maxSpeed = property(_libros_topics_typ.ros_config_typ_maxSpeed_get, _libros_topics_typ.ros_config_typ_maxSpeed_set)
    minSpeed = property(_libros_topics_typ.ros_config_typ_minSpeed_get, _libros_topics_typ.ros_config_typ_minSpeed_set)
    baseWidth = property(_libros_topics_typ.ros_config_typ_baseWidth_get, _libros_topics_typ.ros_config_typ_baseWidth_set)

    def __init__(self):
        _libros_topics_typ.ros_config_typ_swiginit(self, _libros_topics_typ.new_ros_config_typ())
    __swig_destroy__ = _libros_topics_typ.delete_ros_config_typ

# Register ros_config_typ in _libros_topics_typ:
_libros_topics_typ.ros_config_typ_swigregister(ros_config_typ)

class ros_topic_vector3_typ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    y = property(_libros_topics_typ.ros_topic_vector3_typ_y_get, _libros_topics_typ.ros_topic_vector3_typ_y_set)
    z = property(_libros_topics_typ.ros_topic_vector3_typ_z_get, _libros_topics_typ.ros_topic_vector3_typ_z_set)
    x = property(_libros_topics_typ.ros_topic_vector3_typ_x_get, _libros_topics_typ.ros_topic_vector3_typ_x_set)

    def __init__(self):
        _libros_topics_typ.ros_topic_vector3_typ_swiginit(self, _libros_topics_typ.new_ros_topic_vector3_typ())
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_vector3_typ

# Register ros_topic_vector3_typ in _libros_topics_typ:
_libros_topics_typ.ros_topic_vector3_typ_swigregister(ros_topic_vector3_typ)

class ros_topic_twist_typ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    angular = property(_libros_topics_typ.ros_topic_twist_typ_angular_get, _libros_topics_typ.ros_topic_twist_typ_angular_set)
    linear = property(_libros_topics_typ.ros_topic_twist_typ_linear_get, _libros_topics_typ.ros_topic_twist_typ_linear_set)

    def __init__(self):
        _libros_topics_typ.ros_topic_twist_typ_swiginit(self, _libros_topics_typ.new_ros_topic_twist_typ())
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_twist_typ

# Register ros_topic_twist_typ in _libros_topics_typ:
_libros_topics_typ.ros_topic_twist_typ_swigregister(ros_topic_twist_typ)

class ros_topic_time_typ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nsec = property(_libros_topics_typ.ros_topic_time_typ_nsec_get, _libros_topics_typ.ros_topic_time_typ_nsec_set)
    sec = property(_libros_topics_typ.ros_topic_time_typ_sec_get, _libros_topics_typ.ros_topic_time_typ_sec_set)

    def __init__(self):
        _libros_topics_typ.ros_topic_time_typ_swiginit(self, _libros_topics_typ.new_ros_topic_time_typ())
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_time_typ

# Register ros_topic_time_typ in _libros_topics_typ:
_libros_topics_typ.ros_topic_time_typ_swigregister(ros_topic_time_typ)

class ros_topic_header_typ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stamp = property(_libros_topics_typ.ros_topic_header_typ_stamp_get, _libros_topics_typ.ros_topic_header_typ_stamp_set)
    seq = property(_libros_topics_typ.ros_topic_header_typ_seq_get, _libros_topics_typ.ros_topic_header_typ_seq_set)
    frame_id = property(_libros_topics_typ.ros_topic_header_typ_frame_id_get, _libros_topics_typ.ros_topic_header_typ_frame_id_set)

    def __init__(self):
        _libros_topics_typ.ros_topic_header_typ_swiginit(self, _libros_topics_typ.new_ros_topic_header_typ())
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_header_typ

# Register ros_topic_header_typ in _libros_topics_typ:
_libros_topics_typ.ros_topic_header_typ_swigregister(ros_topic_header_typ)

class ros_topic_twistCor_typ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    twist = property(_libros_topics_typ.ros_topic_twistCor_typ_twist_get, _libros_topics_typ.ros_topic_twistCor_typ_twist_set)

    def __init__(self):
        _libros_topics_typ.ros_topic_twistCor_typ_swiginit(self, _libros_topics_typ.new_ros_topic_twistCor_typ())
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_twistCor_typ

# Register ros_topic_twistCor_typ in _libros_topics_typ:
_libros_topics_typ.ros_topic_twistCor_typ_swigregister(ros_topic_twistCor_typ)

class ros_topic_quaternion_typ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    y = property(_libros_topics_typ.ros_topic_quaternion_typ_y_get, _libros_topics_typ.ros_topic_quaternion_typ_y_set)
    z = property(_libros_topics_typ.ros_topic_quaternion_typ_z_get, _libros_topics_typ.ros_topic_quaternion_typ_z_set)
    w = property(_libros_topics_typ.ros_topic_quaternion_typ_w_get, _libros_topics_typ.ros_topic_quaternion_typ_w_set)
    x = property(_libros_topics_typ.ros_topic_quaternion_typ_x_get, _libros_topics_typ.ros_topic_quaternion_typ_x_set)

    def __init__(self):
        _libros_topics_typ.ros_topic_quaternion_typ_swiginit(self, _libros_topics_typ.new_ros_topic_quaternion_typ())
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_quaternion_typ

# Register ros_topic_quaternion_typ in _libros_topics_typ:
_libros_topics_typ.ros_topic_quaternion_typ_swigregister(ros_topic_quaternion_typ)

class ros_topic_point_typ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    y = property(_libros_topics_typ.ros_topic_point_typ_y_get, _libros_topics_typ.ros_topic_point_typ_y_set)
    z = property(_libros_topics_typ.ros_topic_point_typ_z_get, _libros_topics_typ.ros_topic_point_typ_z_set)
    x = property(_libros_topics_typ.ros_topic_point_typ_x_get, _libros_topics_typ.ros_topic_point_typ_x_set)

    def __init__(self):
        _libros_topics_typ.ros_topic_point_typ_swiginit(self, _libros_topics_typ.new_ros_topic_point_typ())
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_point_typ

# Register ros_topic_point_typ in _libros_topics_typ:
_libros_topics_typ.ros_topic_point_typ_swigregister(ros_topic_point_typ)

class ros_topic_pose_typ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    position = property(_libros_topics_typ.ros_topic_pose_typ_position_get, _libros_topics_typ.ros_topic_pose_typ_position_set)
    orientation = property(_libros_topics_typ.ros_topic_pose_typ_orientation_get, _libros_topics_typ.ros_topic_pose_typ_orientation_set)

    def __init__(self):
        _libros_topics_typ.ros_topic_pose_typ_swiginit(self, _libros_topics_typ.new_ros_topic_pose_typ())
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_pose_typ

# Register ros_topic_pose_typ in _libros_topics_typ:
_libros_topics_typ.ros_topic_pose_typ_swigregister(ros_topic_pose_typ)

class ros_topic_poseCor_typ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pose = property(_libros_topics_typ.ros_topic_poseCor_typ_pose_get, _libros_topics_typ.ros_topic_poseCor_typ_pose_set)

    def __init__(self):
        _libros_topics_typ.ros_topic_poseCor_typ_swiginit(self, _libros_topics_typ.new_ros_topic_poseCor_typ())
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_poseCor_typ

# Register ros_topic_poseCor_typ in _libros_topics_typ:
_libros_topics_typ.ros_topic_poseCor_typ_swigregister(ros_topic_poseCor_typ)

class ros_topic_odemety_typ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pose = property(_libros_topics_typ.ros_topic_odemety_typ_pose_get, _libros_topics_typ.ros_topic_odemety_typ_pose_set)
    twist = property(_libros_topics_typ.ros_topic_odemety_typ_twist_get, _libros_topics_typ.ros_topic_odemety_typ_twist_set)
    header = property(_libros_topics_typ.ros_topic_odemety_typ_header_get, _libros_topics_typ.ros_topic_odemety_typ_header_set)

    def __init__(self):
        _libros_topics_typ.ros_topic_odemety_typ_swiginit(self, _libros_topics_typ.new_ros_topic_odemety_typ())
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_odemety_typ

# Register ros_topic_odemety_typ in _libros_topics_typ:
_libros_topics_typ.ros_topic_odemety_typ_swigregister(ros_topic_odemety_typ)

class libros_topics_typodemetry_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def on_change(self):
        return _libros_topics_typ.libros_topics_typodemetry_t_on_change(self)
    nettime = property(_libros_topics_typ.libros_topics_typodemetry_t_nettime_get, _libros_topics_typ.libros_topics_typodemetry_t_nettime_set)
    value = property(_libros_topics_typ.libros_topics_typodemetry_t_value_get, _libros_topics_typ.libros_topics_typodemetry_t_value_set)

    def __init__(self):
        _libros_topics_typ.libros_topics_typodemetry_t_swiginit(self, _libros_topics_typ.new_libros_topics_typodemetry_t())
    __swig_destroy__ = _libros_topics_typ.delete_libros_topics_typodemetry_t

# Register libros_topics_typodemetry_t in _libros_topics_typ:
_libros_topics_typ.libros_topics_typodemetry_t_swigregister(libros_topics_typodemetry_t)

class libros_topics_typtwist_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def publish(self):
        return _libros_topics_typ.libros_topics_typtwist_t_publish(self)
    value = property(_libros_topics_typ.libros_topics_typtwist_t_value_get, _libros_topics_typ.libros_topics_typtwist_t_value_set)

    def __init__(self):
        _libros_topics_typ.libros_topics_typtwist_t_swiginit(self, _libros_topics_typ.new_libros_topics_typtwist_t())
    __swig_destroy__ = _libros_topics_typ.delete_libros_topics_typtwist_t

# Register libros_topics_typtwist_t in _libros_topics_typ:
_libros_topics_typ.libros_topics_typtwist_t_swigregister(libros_topics_typtwist_t)

class libros_topics_typconfig_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def publish(self):
        return _libros_topics_typ.libros_topics_typconfig_t_publish(self)
    value = property(_libros_topics_typ.libros_topics_typconfig_t_value_get, _libros_topics_typ.libros_topics_typconfig_t_value_set)

    def __init__(self):
        _libros_topics_typ.libros_topics_typconfig_t_swiginit(self, _libros_topics_typ.new_libros_topics_typconfig_t())
    __swig_destroy__ = _libros_topics_typ.delete_libros_topics_typconfig_t

# Register libros_topics_typconfig_t in _libros_topics_typ:
_libros_topics_typ.libros_topics_typconfig_t_swigregister(libros_topics_typconfig_t)

class libros_topics_typ_log_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def error(self, log_entry):
        return _libros_topics_typ.libros_topics_typ_log_t_error(self, log_entry)

    def warning(self, log_entry):
        return _libros_topics_typ.libros_topics_typ_log_t_warning(self, log_entry)

    def success(self, log_entry):
        return _libros_topics_typ.libros_topics_typ_log_t_success(self, log_entry)

    def info(self, log_entry):
        return _libros_topics_typ.libros_topics_typ_log_t_info(self, log_entry)

    def debug(self, log_entry):
        return _libros_topics_typ.libros_topics_typ_log_t_debug(self, log_entry)

    def verbose(self, log_entry):
        return _libros_topics_typ.libros_topics_typ_log_t_verbose(self, log_entry)

    def __init__(self):
        _libros_topics_typ.libros_topics_typ_log_t_swiginit(self, _libros_topics_typ.new_libros_topics_typ_log_t())
    __swig_destroy__ = _libros_topics_typ.delete_libros_topics_typ_log_t

# Register libros_topics_typ_log_t in _libros_topics_typ:
_libros_topics_typ.libros_topics_typ_log_t_swigregister(libros_topics_typ_log_t)

class libros_topics_typ_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def connect(self):
        return _libros_topics_typ.libros_topics_typ_t_connect(self)

    def disconnect(self):
        return _libros_topics_typ.libros_topics_typ_t_disconnect(self)

    def process(self):
        return _libros_topics_typ.libros_topics_typ_t_process(self)

    def set_operational(self):
        return _libros_topics_typ.libros_topics_typ_t_set_operational(self)

    def dispose(self):
        return _libros_topics_typ.libros_topics_typ_t_dispose(self)

    def get_nettime(self):
        return _libros_topics_typ.libros_topics_typ_t_get_nettime(self)
    log = property(_libros_topics_typ.libros_topics_typ_t_log_get, _libros_topics_typ.libros_topics_typ_t_log_set)

    def on_connected(self):
        return _libros_topics_typ.libros_topics_typ_t_on_connected(self)

    def on_disconnected(self):
        return _libros_topics_typ.libros_topics_typ_t_on_disconnected(self)

    def on_operational(self):
        return _libros_topics_typ.libros_topics_typ_t_on_operational(self)
    is_connected = property(_libros_topics_typ.libros_topics_typ_t_is_connected_get, _libros_topics_typ.libros_topics_typ_t_is_connected_set)
    is_operational = property(_libros_topics_typ.libros_topics_typ_t_is_operational_get, _libros_topics_typ.libros_topics_typ_t_is_operational_set)
    odemetry = property(_libros_topics_typ.libros_topics_typ_t_odemetry_get, _libros_topics_typ.libros_topics_typ_t_odemetry_set)
    twist = property(_libros_topics_typ.libros_topics_typ_t_twist_get, _libros_topics_typ.libros_topics_typ_t_twist_set)
    config = property(_libros_topics_typ.libros_topics_typ_t_config_get, _libros_topics_typ.libros_topics_typ_t_config_set)

    def __init__(self):
        _libros_topics_typ.libros_topics_typ_t_swiginit(self, _libros_topics_typ.new_libros_topics_typ_t())
    __swig_destroy__ = _libros_topics_typ.delete_libros_topics_typ_t

# Register libros_topics_typ_t in _libros_topics_typ:
_libros_topics_typ.libros_topics_typ_t_swigregister(libros_topics_typ_t)


def libros_topics_typ_init():
    return _libros_topics_typ.libros_topics_typ_init()


