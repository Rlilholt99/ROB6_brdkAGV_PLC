# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_libros_topics_typ')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libros_topics_typ')
    _libros_topics_typ = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libros_topics_typ', [dirname(__file__)])
        except ImportError:
            import _libros_topics_typ
            return _libros_topics_typ
        try:
            _mod = imp.load_module('_libros_topics_typ', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _libros_topics_typ = swig_import_helper()
    del swig_import_helper
else:
    import _libros_topics_typ
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class ros_topics_typEventHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ros_topics_typEventHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ros_topics_typEventHandler, name)
    __repr__ = _swig_repr

    def on_connected(self):
        return _libros_topics_typ.ros_topics_typEventHandler_on_connected(self)

    def on_disconnected(self):
        return _libros_topics_typ.ros_topics_typEventHandler_on_disconnected(self)

    def on_operational(self):
        return _libros_topics_typ.ros_topics_typEventHandler_on_operational(self)

    def on_change_odemetry(self):
        return _libros_topics_typ.ros_topics_typEventHandler_on_change_odemetry(self)

    def on_change_encoder(self):
        return _libros_topics_typ.ros_topics_typEventHandler_on_change_encoder(self)

    def on_change_lineStatus(self):
        return _libros_topics_typ.ros_topics_typEventHandler_on_change_lineStatus(self)
    __swig_destroy__ = _libros_topics_typ.delete_ros_topics_typEventHandler
    __del__ = lambda self: None
    __swig_setmethods__["ros_topics_typ_datamodel"] = _libros_topics_typ.ros_topics_typEventHandler_ros_topics_typ_datamodel_set
    __swig_getmethods__["ros_topics_typ_datamodel"] = _libros_topics_typ.ros_topics_typEventHandler_ros_topics_typ_datamodel_get
    if _newclass:
        ros_topics_typ_datamodel = _swig_property(_libros_topics_typ.ros_topics_typEventHandler_ros_topics_typ_datamodel_get, _libros_topics_typ.ros_topics_typEventHandler_ros_topics_typ_datamodel_set)

    def __init__(self):
        if self.__class__ == ros_topics_typEventHandler:
            _self = None
        else:
            _self = self
        this = _libros_topics_typ.new_ros_topics_typEventHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _libros_topics_typ.disown_ros_topics_typEventHandler(self)
        return weakref_proxy(self)
ros_topics_typEventHandler_swigregister = _libros_topics_typ.ros_topics_typEventHandler_swigregister
ros_topics_typEventHandler_swigregister(ros_topics_typEventHandler)


def add_event_handler(ros_topics_typ_datamodel, handler):
    return _libros_topics_typ.add_event_handler(ros_topics_typ_datamodel, handler)
add_event_handler = _libros_topics_typ.add_event_handler
class ros_lineStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ros_lineStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ros_lineStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lineStatusCode"] = _libros_topics_typ.ros_lineStatus_lineStatusCode_set
    __swig_getmethods__["lineStatusCode"] = _libros_topics_typ.ros_lineStatus_lineStatusCode_get
    if _newclass:
        lineStatusCode = _swig_property(_libros_topics_typ.ros_lineStatus_lineStatusCode_get, _libros_topics_typ.ros_lineStatus_lineStatusCode_set)

    def __init__(self):
        this = _libros_topics_typ.new_ros_lineStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_ros_lineStatus
    __del__ = lambda self: None
ros_lineStatus_swigregister = _libros_topics_typ.ros_lineStatus_swigregister
ros_lineStatus_swigregister(ros_lineStatus)

class ros_lineMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ros_lineMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ros_lineMode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lineMode"] = _libros_topics_typ.ros_lineMode_lineMode_set
    __swig_getmethods__["lineMode"] = _libros_topics_typ.ros_lineMode_lineMode_get
    if _newclass:
        lineMode = _swig_property(_libros_topics_typ.ros_lineMode_lineMode_get, _libros_topics_typ.ros_lineMode_lineMode_set)
    __swig_setmethods__["lineSharpTurn"] = _libros_topics_typ.ros_lineMode_lineSharpTurn_set
    __swig_getmethods__["lineSharpTurn"] = _libros_topics_typ.ros_lineMode_lineSharpTurn_get
    if _newclass:
        lineSharpTurn = _swig_property(_libros_topics_typ.ros_lineMode_lineSharpTurn_get, _libros_topics_typ.ros_lineMode_lineSharpTurn_set)
    __swig_setmethods__["lineHoldRight"] = _libros_topics_typ.ros_lineMode_lineHoldRight_set
    __swig_getmethods__["lineHoldRight"] = _libros_topics_typ.ros_lineMode_lineHoldRight_get
    if _newclass:
        lineHoldRight = _swig_property(_libros_topics_typ.ros_lineMode_lineHoldRight_get, _libros_topics_typ.ros_lineMode_lineHoldRight_set)
    __swig_setmethods__["lineForward"] = _libros_topics_typ.ros_lineMode_lineForward_set
    __swig_getmethods__["lineForward"] = _libros_topics_typ.ros_lineMode_lineForward_get
    if _newclass:
        lineForward = _swig_property(_libros_topics_typ.ros_lineMode_lineForward_get, _libros_topics_typ.ros_lineMode_lineForward_set)

    def __init__(self):
        this = _libros_topics_typ.new_ros_lineMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_ros_lineMode
    __del__ = lambda self: None
ros_lineMode_swigregister = _libros_topics_typ.ros_lineMode_swigregister
ros_lineMode_swigregister(ros_lineMode)

class ros_armBools(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ros_armBools, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ros_armBools, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vaccumValve"] = _libros_topics_typ.ros_armBools_vaccumValve_set
    __swig_getmethods__["vaccumValve"] = _libros_topics_typ.ros_armBools_vaccumValve_get
    if _newclass:
        vaccumValve = _swig_property(_libros_topics_typ.ros_armBools_vaccumValve_get, _libros_topics_typ.ros_armBools_vaccumValve_set)
    __swig_setmethods__["vaccumMotor"] = _libros_topics_typ.ros_armBools_vaccumMotor_set
    __swig_getmethods__["vaccumMotor"] = _libros_topics_typ.ros_armBools_vaccumMotor_get
    if _newclass:
        vaccumMotor = _swig_property(_libros_topics_typ.ros_armBools_vaccumMotor_get, _libros_topics_typ.ros_armBools_vaccumMotor_set)

    def __init__(self):
        this = _libros_topics_typ.new_ros_armBools()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_ros_armBools
    __del__ = lambda self: None
ros_armBools_swigregister = _libros_topics_typ.ros_armBools_swigregister
ros_armBools_swigregister(ros_armBools)

class ros_encoder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ros_encoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ros_encoder, name)
    __repr__ = _swig_repr
    __swig_setmethods__["encoder1"] = _libros_topics_typ.ros_encoder_encoder1_set
    __swig_getmethods__["encoder1"] = _libros_topics_typ.ros_encoder_encoder1_get
    if _newclass:
        encoder1 = _swig_property(_libros_topics_typ.ros_encoder_encoder1_get, _libros_topics_typ.ros_encoder_encoder1_set)
    __swig_setmethods__["encoder2"] = _libros_topics_typ.ros_encoder_encoder2_set
    __swig_getmethods__["encoder2"] = _libros_topics_typ.ros_encoder_encoder2_get
    if _newclass:
        encoder2 = _swig_property(_libros_topics_typ.ros_encoder_encoder2_get, _libros_topics_typ.ros_encoder_encoder2_set)

    def __init__(self):
        this = _libros_topics_typ.new_ros_encoder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_ros_encoder
    __del__ = lambda self: None
ros_encoder_swigregister = _libros_topics_typ.ros_encoder_swigregister
ros_encoder_swigregister(ros_encoder)

class ros_config_typ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ros_config_typ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ros_config_typ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["maxSpeed"] = _libros_topics_typ.ros_config_typ_maxSpeed_set
    __swig_getmethods__["maxSpeed"] = _libros_topics_typ.ros_config_typ_maxSpeed_get
    if _newclass:
        maxSpeed = _swig_property(_libros_topics_typ.ros_config_typ_maxSpeed_get, _libros_topics_typ.ros_config_typ_maxSpeed_set)
    __swig_setmethods__["minSpeed"] = _libros_topics_typ.ros_config_typ_minSpeed_set
    __swig_getmethods__["minSpeed"] = _libros_topics_typ.ros_config_typ_minSpeed_get
    if _newclass:
        minSpeed = _swig_property(_libros_topics_typ.ros_config_typ_minSpeed_get, _libros_topics_typ.ros_config_typ_minSpeed_set)
    __swig_setmethods__["baseWidth"] = _libros_topics_typ.ros_config_typ_baseWidth_set
    __swig_getmethods__["baseWidth"] = _libros_topics_typ.ros_config_typ_baseWidth_get
    if _newclass:
        baseWidth = _swig_property(_libros_topics_typ.ros_config_typ_baseWidth_get, _libros_topics_typ.ros_config_typ_baseWidth_set)

    def __init__(self):
        this = _libros_topics_typ.new_ros_config_typ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_ros_config_typ
    __del__ = lambda self: None
ros_config_typ_swigregister = _libros_topics_typ.ros_config_typ_swigregister
ros_config_typ_swigregister(ros_config_typ)

class ros_topic_vector3_typ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ros_topic_vector3_typ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ros_topic_vector3_typ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["y"] = _libros_topics_typ.ros_topic_vector3_typ_y_set
    __swig_getmethods__["y"] = _libros_topics_typ.ros_topic_vector3_typ_y_get
    if _newclass:
        y = _swig_property(_libros_topics_typ.ros_topic_vector3_typ_y_get, _libros_topics_typ.ros_topic_vector3_typ_y_set)
    __swig_setmethods__["z"] = _libros_topics_typ.ros_topic_vector3_typ_z_set
    __swig_getmethods__["z"] = _libros_topics_typ.ros_topic_vector3_typ_z_get
    if _newclass:
        z = _swig_property(_libros_topics_typ.ros_topic_vector3_typ_z_get, _libros_topics_typ.ros_topic_vector3_typ_z_set)
    __swig_setmethods__["x"] = _libros_topics_typ.ros_topic_vector3_typ_x_set
    __swig_getmethods__["x"] = _libros_topics_typ.ros_topic_vector3_typ_x_get
    if _newclass:
        x = _swig_property(_libros_topics_typ.ros_topic_vector3_typ_x_get, _libros_topics_typ.ros_topic_vector3_typ_x_set)

    def __init__(self):
        this = _libros_topics_typ.new_ros_topic_vector3_typ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_vector3_typ
    __del__ = lambda self: None
ros_topic_vector3_typ_swigregister = _libros_topics_typ.ros_topic_vector3_typ_swigregister
ros_topic_vector3_typ_swigregister(ros_topic_vector3_typ)

class ros_topic_twist_typ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ros_topic_twist_typ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ros_topic_twist_typ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["angular"] = _libros_topics_typ.ros_topic_twist_typ_angular_set
    __swig_getmethods__["angular"] = _libros_topics_typ.ros_topic_twist_typ_angular_get
    if _newclass:
        angular = _swig_property(_libros_topics_typ.ros_topic_twist_typ_angular_get, _libros_topics_typ.ros_topic_twist_typ_angular_set)
    __swig_setmethods__["linear"] = _libros_topics_typ.ros_topic_twist_typ_linear_set
    __swig_getmethods__["linear"] = _libros_topics_typ.ros_topic_twist_typ_linear_get
    if _newclass:
        linear = _swig_property(_libros_topics_typ.ros_topic_twist_typ_linear_get, _libros_topics_typ.ros_topic_twist_typ_linear_set)

    def __init__(self):
        this = _libros_topics_typ.new_ros_topic_twist_typ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_twist_typ
    __del__ = lambda self: None
ros_topic_twist_typ_swigregister = _libros_topics_typ.ros_topic_twist_typ_swigregister
ros_topic_twist_typ_swigregister(ros_topic_twist_typ)

class ros_topic_time_typ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ros_topic_time_typ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ros_topic_time_typ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nsec"] = _libros_topics_typ.ros_topic_time_typ_nsec_set
    __swig_getmethods__["nsec"] = _libros_topics_typ.ros_topic_time_typ_nsec_get
    if _newclass:
        nsec = _swig_property(_libros_topics_typ.ros_topic_time_typ_nsec_get, _libros_topics_typ.ros_topic_time_typ_nsec_set)
    __swig_setmethods__["sec"] = _libros_topics_typ.ros_topic_time_typ_sec_set
    __swig_getmethods__["sec"] = _libros_topics_typ.ros_topic_time_typ_sec_get
    if _newclass:
        sec = _swig_property(_libros_topics_typ.ros_topic_time_typ_sec_get, _libros_topics_typ.ros_topic_time_typ_sec_set)

    def __init__(self):
        this = _libros_topics_typ.new_ros_topic_time_typ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_time_typ
    __del__ = lambda self: None
ros_topic_time_typ_swigregister = _libros_topics_typ.ros_topic_time_typ_swigregister
ros_topic_time_typ_swigregister(ros_topic_time_typ)

class ros_topic_header_typ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ros_topic_header_typ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ros_topic_header_typ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stamp"] = _libros_topics_typ.ros_topic_header_typ_stamp_set
    __swig_getmethods__["stamp"] = _libros_topics_typ.ros_topic_header_typ_stamp_get
    if _newclass:
        stamp = _swig_property(_libros_topics_typ.ros_topic_header_typ_stamp_get, _libros_topics_typ.ros_topic_header_typ_stamp_set)
    __swig_setmethods__["seq"] = _libros_topics_typ.ros_topic_header_typ_seq_set
    __swig_getmethods__["seq"] = _libros_topics_typ.ros_topic_header_typ_seq_get
    if _newclass:
        seq = _swig_property(_libros_topics_typ.ros_topic_header_typ_seq_get, _libros_topics_typ.ros_topic_header_typ_seq_set)
    __swig_setmethods__["frame_id"] = _libros_topics_typ.ros_topic_header_typ_frame_id_set
    __swig_getmethods__["frame_id"] = _libros_topics_typ.ros_topic_header_typ_frame_id_get
    if _newclass:
        frame_id = _swig_property(_libros_topics_typ.ros_topic_header_typ_frame_id_get, _libros_topics_typ.ros_topic_header_typ_frame_id_set)

    def __init__(self):
        this = _libros_topics_typ.new_ros_topic_header_typ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_header_typ
    __del__ = lambda self: None
ros_topic_header_typ_swigregister = _libros_topics_typ.ros_topic_header_typ_swigregister
ros_topic_header_typ_swigregister(ros_topic_header_typ)

class ros_topic_twistCor_typ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ros_topic_twistCor_typ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ros_topic_twistCor_typ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["twist"] = _libros_topics_typ.ros_topic_twistCor_typ_twist_set
    __swig_getmethods__["twist"] = _libros_topics_typ.ros_topic_twistCor_typ_twist_get
    if _newclass:
        twist = _swig_property(_libros_topics_typ.ros_topic_twistCor_typ_twist_get, _libros_topics_typ.ros_topic_twistCor_typ_twist_set)

    def __init__(self):
        this = _libros_topics_typ.new_ros_topic_twistCor_typ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_twistCor_typ
    __del__ = lambda self: None
ros_topic_twistCor_typ_swigregister = _libros_topics_typ.ros_topic_twistCor_typ_swigregister
ros_topic_twistCor_typ_swigregister(ros_topic_twistCor_typ)

class ros_topic_quaternion_typ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ros_topic_quaternion_typ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ros_topic_quaternion_typ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["y"] = _libros_topics_typ.ros_topic_quaternion_typ_y_set
    __swig_getmethods__["y"] = _libros_topics_typ.ros_topic_quaternion_typ_y_get
    if _newclass:
        y = _swig_property(_libros_topics_typ.ros_topic_quaternion_typ_y_get, _libros_topics_typ.ros_topic_quaternion_typ_y_set)
    __swig_setmethods__["z"] = _libros_topics_typ.ros_topic_quaternion_typ_z_set
    __swig_getmethods__["z"] = _libros_topics_typ.ros_topic_quaternion_typ_z_get
    if _newclass:
        z = _swig_property(_libros_topics_typ.ros_topic_quaternion_typ_z_get, _libros_topics_typ.ros_topic_quaternion_typ_z_set)
    __swig_setmethods__["w"] = _libros_topics_typ.ros_topic_quaternion_typ_w_set
    __swig_getmethods__["w"] = _libros_topics_typ.ros_topic_quaternion_typ_w_get
    if _newclass:
        w = _swig_property(_libros_topics_typ.ros_topic_quaternion_typ_w_get, _libros_topics_typ.ros_topic_quaternion_typ_w_set)
    __swig_setmethods__["x"] = _libros_topics_typ.ros_topic_quaternion_typ_x_set
    __swig_getmethods__["x"] = _libros_topics_typ.ros_topic_quaternion_typ_x_get
    if _newclass:
        x = _swig_property(_libros_topics_typ.ros_topic_quaternion_typ_x_get, _libros_topics_typ.ros_topic_quaternion_typ_x_set)

    def __init__(self):
        this = _libros_topics_typ.new_ros_topic_quaternion_typ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_quaternion_typ
    __del__ = lambda self: None
ros_topic_quaternion_typ_swigregister = _libros_topics_typ.ros_topic_quaternion_typ_swigregister
ros_topic_quaternion_typ_swigregister(ros_topic_quaternion_typ)

class ros_topic_point_typ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ros_topic_point_typ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ros_topic_point_typ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["y"] = _libros_topics_typ.ros_topic_point_typ_y_set
    __swig_getmethods__["y"] = _libros_topics_typ.ros_topic_point_typ_y_get
    if _newclass:
        y = _swig_property(_libros_topics_typ.ros_topic_point_typ_y_get, _libros_topics_typ.ros_topic_point_typ_y_set)
    __swig_setmethods__["z"] = _libros_topics_typ.ros_topic_point_typ_z_set
    __swig_getmethods__["z"] = _libros_topics_typ.ros_topic_point_typ_z_get
    if _newclass:
        z = _swig_property(_libros_topics_typ.ros_topic_point_typ_z_get, _libros_topics_typ.ros_topic_point_typ_z_set)
    __swig_setmethods__["x"] = _libros_topics_typ.ros_topic_point_typ_x_set
    __swig_getmethods__["x"] = _libros_topics_typ.ros_topic_point_typ_x_get
    if _newclass:
        x = _swig_property(_libros_topics_typ.ros_topic_point_typ_x_get, _libros_topics_typ.ros_topic_point_typ_x_set)

    def __init__(self):
        this = _libros_topics_typ.new_ros_topic_point_typ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_point_typ
    __del__ = lambda self: None
ros_topic_point_typ_swigregister = _libros_topics_typ.ros_topic_point_typ_swigregister
ros_topic_point_typ_swigregister(ros_topic_point_typ)

class ros_topic_pose_typ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ros_topic_pose_typ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ros_topic_pose_typ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _libros_topics_typ.ros_topic_pose_typ_position_set
    __swig_getmethods__["position"] = _libros_topics_typ.ros_topic_pose_typ_position_get
    if _newclass:
        position = _swig_property(_libros_topics_typ.ros_topic_pose_typ_position_get, _libros_topics_typ.ros_topic_pose_typ_position_set)
    __swig_setmethods__["orientation"] = _libros_topics_typ.ros_topic_pose_typ_orientation_set
    __swig_getmethods__["orientation"] = _libros_topics_typ.ros_topic_pose_typ_orientation_get
    if _newclass:
        orientation = _swig_property(_libros_topics_typ.ros_topic_pose_typ_orientation_get, _libros_topics_typ.ros_topic_pose_typ_orientation_set)

    def __init__(self):
        this = _libros_topics_typ.new_ros_topic_pose_typ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_pose_typ
    __del__ = lambda self: None
ros_topic_pose_typ_swigregister = _libros_topics_typ.ros_topic_pose_typ_swigregister
ros_topic_pose_typ_swigregister(ros_topic_pose_typ)

class ros_topic_poseCor_typ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ros_topic_poseCor_typ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ros_topic_poseCor_typ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pose"] = _libros_topics_typ.ros_topic_poseCor_typ_pose_set
    __swig_getmethods__["pose"] = _libros_topics_typ.ros_topic_poseCor_typ_pose_get
    if _newclass:
        pose = _swig_property(_libros_topics_typ.ros_topic_poseCor_typ_pose_get, _libros_topics_typ.ros_topic_poseCor_typ_pose_set)

    def __init__(self):
        this = _libros_topics_typ.new_ros_topic_poseCor_typ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_poseCor_typ
    __del__ = lambda self: None
ros_topic_poseCor_typ_swigregister = _libros_topics_typ.ros_topic_poseCor_typ_swigregister
ros_topic_poseCor_typ_swigregister(ros_topic_poseCor_typ)

class ros_topic_odemety_typ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ros_topic_odemety_typ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ros_topic_odemety_typ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pose"] = _libros_topics_typ.ros_topic_odemety_typ_pose_set
    __swig_getmethods__["pose"] = _libros_topics_typ.ros_topic_odemety_typ_pose_get
    if _newclass:
        pose = _swig_property(_libros_topics_typ.ros_topic_odemety_typ_pose_get, _libros_topics_typ.ros_topic_odemety_typ_pose_set)
    __swig_setmethods__["twist"] = _libros_topics_typ.ros_topic_odemety_typ_twist_set
    __swig_getmethods__["twist"] = _libros_topics_typ.ros_topic_odemety_typ_twist_get
    if _newclass:
        twist = _swig_property(_libros_topics_typ.ros_topic_odemety_typ_twist_get, _libros_topics_typ.ros_topic_odemety_typ_twist_set)
    __swig_setmethods__["header"] = _libros_topics_typ.ros_topic_odemety_typ_header_set
    __swig_getmethods__["header"] = _libros_topics_typ.ros_topic_odemety_typ_header_get
    if _newclass:
        header = _swig_property(_libros_topics_typ.ros_topic_odemety_typ_header_get, _libros_topics_typ.ros_topic_odemety_typ_header_set)

    def __init__(self):
        this = _libros_topics_typ.new_ros_topic_odemety_typ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_ros_topic_odemety_typ
    __del__ = lambda self: None
ros_topic_odemety_typ_swigregister = _libros_topics_typ.ros_topic_odemety_typ_swigregister
ros_topic_odemety_typ_swigregister(ros_topic_odemety_typ)

class libros_topics_typodemetry_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, libros_topics_typodemetry_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, libros_topics_typodemetry_t, name)
    __repr__ = _swig_repr

    def on_change(self):
        return _libros_topics_typ.libros_topics_typodemetry_t_on_change(self)
    __swig_setmethods__["nettime"] = _libros_topics_typ.libros_topics_typodemetry_t_nettime_set
    __swig_getmethods__["nettime"] = _libros_topics_typ.libros_topics_typodemetry_t_nettime_get
    if _newclass:
        nettime = _swig_property(_libros_topics_typ.libros_topics_typodemetry_t_nettime_get, _libros_topics_typ.libros_topics_typodemetry_t_nettime_set)
    __swig_setmethods__["value"] = _libros_topics_typ.libros_topics_typodemetry_t_value_set
    __swig_getmethods__["value"] = _libros_topics_typ.libros_topics_typodemetry_t_value_get
    if _newclass:
        value = _swig_property(_libros_topics_typ.libros_topics_typodemetry_t_value_get, _libros_topics_typ.libros_topics_typodemetry_t_value_set)

    def __init__(self):
        this = _libros_topics_typ.new_libros_topics_typodemetry_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_libros_topics_typodemetry_t
    __del__ = lambda self: None
libros_topics_typodemetry_t_swigregister = _libros_topics_typ.libros_topics_typodemetry_t_swigregister
libros_topics_typodemetry_t_swigregister(libros_topics_typodemetry_t)

class libros_topics_typtwist_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, libros_topics_typtwist_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, libros_topics_typtwist_t, name)
    __repr__ = _swig_repr

    def publish(self):
        return _libros_topics_typ.libros_topics_typtwist_t_publish(self)
    __swig_setmethods__["value"] = _libros_topics_typ.libros_topics_typtwist_t_value_set
    __swig_getmethods__["value"] = _libros_topics_typ.libros_topics_typtwist_t_value_get
    if _newclass:
        value = _swig_property(_libros_topics_typ.libros_topics_typtwist_t_value_get, _libros_topics_typ.libros_topics_typtwist_t_value_set)

    def __init__(self):
        this = _libros_topics_typ.new_libros_topics_typtwist_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_libros_topics_typtwist_t
    __del__ = lambda self: None
libros_topics_typtwist_t_swigregister = _libros_topics_typ.libros_topics_typtwist_t_swigregister
libros_topics_typtwist_t_swigregister(libros_topics_typtwist_t)

class libros_topics_typconfig_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, libros_topics_typconfig_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, libros_topics_typconfig_t, name)
    __repr__ = _swig_repr

    def publish(self):
        return _libros_topics_typ.libros_topics_typconfig_t_publish(self)
    __swig_setmethods__["value"] = _libros_topics_typ.libros_topics_typconfig_t_value_set
    __swig_getmethods__["value"] = _libros_topics_typ.libros_topics_typconfig_t_value_get
    if _newclass:
        value = _swig_property(_libros_topics_typ.libros_topics_typconfig_t_value_get, _libros_topics_typ.libros_topics_typconfig_t_value_set)

    def __init__(self):
        this = _libros_topics_typ.new_libros_topics_typconfig_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_libros_topics_typconfig_t
    __del__ = lambda self: None
libros_topics_typconfig_t_swigregister = _libros_topics_typ.libros_topics_typconfig_t_swigregister
libros_topics_typconfig_t_swigregister(libros_topics_typconfig_t)

class libros_topics_typencoder_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, libros_topics_typencoder_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, libros_topics_typencoder_t, name)
    __repr__ = _swig_repr

    def on_change(self):
        return _libros_topics_typ.libros_topics_typencoder_t_on_change(self)
    __swig_setmethods__["nettime"] = _libros_topics_typ.libros_topics_typencoder_t_nettime_set
    __swig_getmethods__["nettime"] = _libros_topics_typ.libros_topics_typencoder_t_nettime_get
    if _newclass:
        nettime = _swig_property(_libros_topics_typ.libros_topics_typencoder_t_nettime_get, _libros_topics_typ.libros_topics_typencoder_t_nettime_set)
    __swig_setmethods__["value"] = _libros_topics_typ.libros_topics_typencoder_t_value_set
    __swig_getmethods__["value"] = _libros_topics_typ.libros_topics_typencoder_t_value_get
    if _newclass:
        value = _swig_property(_libros_topics_typ.libros_topics_typencoder_t_value_get, _libros_topics_typ.libros_topics_typencoder_t_value_set)

    def __init__(self):
        this = _libros_topics_typ.new_libros_topics_typencoder_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_libros_topics_typencoder_t
    __del__ = lambda self: None
libros_topics_typencoder_t_swigregister = _libros_topics_typ.libros_topics_typencoder_t_swigregister
libros_topics_typencoder_t_swigregister(libros_topics_typencoder_t)

class libros_topics_typvaccumTopic_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, libros_topics_typvaccumTopic_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, libros_topics_typvaccumTopic_t, name)
    __repr__ = _swig_repr

    def publish(self):
        return _libros_topics_typ.libros_topics_typvaccumTopic_t_publish(self)
    __swig_setmethods__["value"] = _libros_topics_typ.libros_topics_typvaccumTopic_t_value_set
    __swig_getmethods__["value"] = _libros_topics_typ.libros_topics_typvaccumTopic_t_value_get
    if _newclass:
        value = _swig_property(_libros_topics_typ.libros_topics_typvaccumTopic_t_value_get, _libros_topics_typ.libros_topics_typvaccumTopic_t_value_set)

    def __init__(self):
        this = _libros_topics_typ.new_libros_topics_typvaccumTopic_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_libros_topics_typvaccumTopic_t
    __del__ = lambda self: None
libros_topics_typvaccumTopic_t_swigregister = _libros_topics_typ.libros_topics_typvaccumTopic_t_swigregister
libros_topics_typvaccumTopic_t_swigregister(libros_topics_typvaccumTopic_t)

class libros_topics_typlineFollow_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, libros_topics_typlineFollow_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, libros_topics_typlineFollow_t, name)
    __repr__ = _swig_repr

    def publish(self):
        return _libros_topics_typ.libros_topics_typlineFollow_t_publish(self)
    __swig_setmethods__["value"] = _libros_topics_typ.libros_topics_typlineFollow_t_value_set
    __swig_getmethods__["value"] = _libros_topics_typ.libros_topics_typlineFollow_t_value_get
    if _newclass:
        value = _swig_property(_libros_topics_typ.libros_topics_typlineFollow_t_value_get, _libros_topics_typ.libros_topics_typlineFollow_t_value_set)

    def __init__(self):
        this = _libros_topics_typ.new_libros_topics_typlineFollow_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_libros_topics_typlineFollow_t
    __del__ = lambda self: None
libros_topics_typlineFollow_t_swigregister = _libros_topics_typ.libros_topics_typlineFollow_t_swigregister
libros_topics_typlineFollow_t_swigregister(libros_topics_typlineFollow_t)

class libros_topics_typlineStatus_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, libros_topics_typlineStatus_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, libros_topics_typlineStatus_t, name)
    __repr__ = _swig_repr

    def on_change(self):
        return _libros_topics_typ.libros_topics_typlineStatus_t_on_change(self)
    __swig_setmethods__["nettime"] = _libros_topics_typ.libros_topics_typlineStatus_t_nettime_set
    __swig_getmethods__["nettime"] = _libros_topics_typ.libros_topics_typlineStatus_t_nettime_get
    if _newclass:
        nettime = _swig_property(_libros_topics_typ.libros_topics_typlineStatus_t_nettime_get, _libros_topics_typ.libros_topics_typlineStatus_t_nettime_set)
    __swig_setmethods__["value"] = _libros_topics_typ.libros_topics_typlineStatus_t_value_set
    __swig_getmethods__["value"] = _libros_topics_typ.libros_topics_typlineStatus_t_value_get
    if _newclass:
        value = _swig_property(_libros_topics_typ.libros_topics_typlineStatus_t_value_get, _libros_topics_typ.libros_topics_typlineStatus_t_value_set)

    def __init__(self):
        this = _libros_topics_typ.new_libros_topics_typlineStatus_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_libros_topics_typlineStatus_t
    __del__ = lambda self: None
libros_topics_typlineStatus_t_swigregister = _libros_topics_typ.libros_topics_typlineStatus_t_swigregister
libros_topics_typlineStatus_t_swigregister(libros_topics_typlineStatus_t)

class libros_topics_typ_log_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, libros_topics_typ_log_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, libros_topics_typ_log_t, name)
    __repr__ = _swig_repr

    def error(self, log_entry):
        return _libros_topics_typ.libros_topics_typ_log_t_error(self, log_entry)

    def warning(self, log_entry):
        return _libros_topics_typ.libros_topics_typ_log_t_warning(self, log_entry)

    def success(self, log_entry):
        return _libros_topics_typ.libros_topics_typ_log_t_success(self, log_entry)

    def info(self, log_entry):
        return _libros_topics_typ.libros_topics_typ_log_t_info(self, log_entry)

    def debug(self, log_entry):
        return _libros_topics_typ.libros_topics_typ_log_t_debug(self, log_entry)

    def verbose(self, log_entry):
        return _libros_topics_typ.libros_topics_typ_log_t_verbose(self, log_entry)

    def __init__(self):
        this = _libros_topics_typ.new_libros_topics_typ_log_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_libros_topics_typ_log_t
    __del__ = lambda self: None
libros_topics_typ_log_t_swigregister = _libros_topics_typ.libros_topics_typ_log_t_swigregister
libros_topics_typ_log_t_swigregister(libros_topics_typ_log_t)

class libros_topics_typ_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, libros_topics_typ_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, libros_topics_typ_t, name)
    __repr__ = _swig_repr

    def connect(self):
        return _libros_topics_typ.libros_topics_typ_t_connect(self)

    def disconnect(self):
        return _libros_topics_typ.libros_topics_typ_t_disconnect(self)

    def process(self):
        return _libros_topics_typ.libros_topics_typ_t_process(self)

    def set_operational(self):
        return _libros_topics_typ.libros_topics_typ_t_set_operational(self)

    def dispose(self):
        return _libros_topics_typ.libros_topics_typ_t_dispose(self)

    def get_nettime(self):
        return _libros_topics_typ.libros_topics_typ_t_get_nettime(self)
    __swig_setmethods__["log"] = _libros_topics_typ.libros_topics_typ_t_log_set
    __swig_getmethods__["log"] = _libros_topics_typ.libros_topics_typ_t_log_get
    if _newclass:
        log = _swig_property(_libros_topics_typ.libros_topics_typ_t_log_get, _libros_topics_typ.libros_topics_typ_t_log_set)

    def on_connected(self):
        return _libros_topics_typ.libros_topics_typ_t_on_connected(self)

    def on_disconnected(self):
        return _libros_topics_typ.libros_topics_typ_t_on_disconnected(self)

    def on_operational(self):
        return _libros_topics_typ.libros_topics_typ_t_on_operational(self)
    __swig_setmethods__["is_connected"] = _libros_topics_typ.libros_topics_typ_t_is_connected_set
    __swig_getmethods__["is_connected"] = _libros_topics_typ.libros_topics_typ_t_is_connected_get
    if _newclass:
        is_connected = _swig_property(_libros_topics_typ.libros_topics_typ_t_is_connected_get, _libros_topics_typ.libros_topics_typ_t_is_connected_set)
    __swig_setmethods__["is_operational"] = _libros_topics_typ.libros_topics_typ_t_is_operational_set
    __swig_getmethods__["is_operational"] = _libros_topics_typ.libros_topics_typ_t_is_operational_get
    if _newclass:
        is_operational = _swig_property(_libros_topics_typ.libros_topics_typ_t_is_operational_get, _libros_topics_typ.libros_topics_typ_t_is_operational_set)
    __swig_setmethods__["odemetry"] = _libros_topics_typ.libros_topics_typ_t_odemetry_set
    __swig_getmethods__["odemetry"] = _libros_topics_typ.libros_topics_typ_t_odemetry_get
    if _newclass:
        odemetry = _swig_property(_libros_topics_typ.libros_topics_typ_t_odemetry_get, _libros_topics_typ.libros_topics_typ_t_odemetry_set)
    __swig_setmethods__["twist"] = _libros_topics_typ.libros_topics_typ_t_twist_set
    __swig_getmethods__["twist"] = _libros_topics_typ.libros_topics_typ_t_twist_get
    if _newclass:
        twist = _swig_property(_libros_topics_typ.libros_topics_typ_t_twist_get, _libros_topics_typ.libros_topics_typ_t_twist_set)
    __swig_setmethods__["config"] = _libros_topics_typ.libros_topics_typ_t_config_set
    __swig_getmethods__["config"] = _libros_topics_typ.libros_topics_typ_t_config_get
    if _newclass:
        config = _swig_property(_libros_topics_typ.libros_topics_typ_t_config_get, _libros_topics_typ.libros_topics_typ_t_config_set)
    __swig_setmethods__["encoder"] = _libros_topics_typ.libros_topics_typ_t_encoder_set
    __swig_getmethods__["encoder"] = _libros_topics_typ.libros_topics_typ_t_encoder_get
    if _newclass:
        encoder = _swig_property(_libros_topics_typ.libros_topics_typ_t_encoder_get, _libros_topics_typ.libros_topics_typ_t_encoder_set)
    __swig_setmethods__["vaccumTopic"] = _libros_topics_typ.libros_topics_typ_t_vaccumTopic_set
    __swig_getmethods__["vaccumTopic"] = _libros_topics_typ.libros_topics_typ_t_vaccumTopic_get
    if _newclass:
        vaccumTopic = _swig_property(_libros_topics_typ.libros_topics_typ_t_vaccumTopic_get, _libros_topics_typ.libros_topics_typ_t_vaccumTopic_set)
    __swig_setmethods__["lineFollow"] = _libros_topics_typ.libros_topics_typ_t_lineFollow_set
    __swig_getmethods__["lineFollow"] = _libros_topics_typ.libros_topics_typ_t_lineFollow_get
    if _newclass:
        lineFollow = _swig_property(_libros_topics_typ.libros_topics_typ_t_lineFollow_get, _libros_topics_typ.libros_topics_typ_t_lineFollow_set)
    __swig_setmethods__["lineStatus"] = _libros_topics_typ.libros_topics_typ_t_lineStatus_set
    __swig_getmethods__["lineStatus"] = _libros_topics_typ.libros_topics_typ_t_lineStatus_get
    if _newclass:
        lineStatus = _swig_property(_libros_topics_typ.libros_topics_typ_t_lineStatus_get, _libros_topics_typ.libros_topics_typ_t_lineStatus_set)

    def __init__(self):
        this = _libros_topics_typ.new_libros_topics_typ_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libros_topics_typ.delete_libros_topics_typ_t
    __del__ = lambda self: None
libros_topics_typ_t_swigregister = _libros_topics_typ.libros_topics_typ_t_swigregister
libros_topics_typ_t_swigregister(libros_topics_typ_t)


def libros_topics_typ_init():
    return _libros_topics_typ.libros_topics_typ_init()
libros_topics_typ_init = _libros_topics_typ.libros_topics_typ_init
# This file is compatible with both classic and new-style classes.


